#ifndef NGLDRAW_H__
#define NGLDRAW_H__

#include <ngl/Camera.h>
#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/Transformation.h>
#include <ngl/Text.h>
#include <ngl/Obj.h>
#include <SDL.h>
#include <bullet/btBulletDynamicsCommon.h>

class PhysicsWorld;

class NGLDraw
{
  public :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor this will have a valid OpenGL context so we can create gl stuff
    //----------------------------------------------------------------------------------------------------------------------
    NGLDraw();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor used to remove any NGL stuff created
    //----------------------------------------------------------------------------------------------------------------------
    ~NGLDraw();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief resize our screen and set the camera aspect ratio
    /// @param[in] _w the new width
    /// @param[in] _h the new height
    //----------------------------------------------------------------------------------------------------------------------
    void resize(int _w, int _h);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw the scene
    //----------------------------------------------------------------------------------------------------------------------
    void draw();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse is moved
    /// @param _event the SDL mouse event structure containing all mouse info
    //----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent (const SDL_MouseMotionEvent &_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse button is presses
    /// @param _event the SDL mouse event structure containing all mouse info
    //----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent (const SDL_MouseButtonEvent &_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is released
    /// @param _event the SDL mouse event structure containing all mouse info
    //----------------------------------------------------------------------------------------------------------------------
    void mouseReleaseEvent (const SDL_MouseButtonEvent &_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse wheel is moved
    /// @param _event the SDL mouse event structure containing all mouse info
    //----------------------------------------------------------------------------------------------------------------------
    void wheelEvent(float _delta);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  toggle the animation and simulation
    //----------------------------------------------------------------------------------------------------------------------
     inline void toggleAnimation(){m_animate ^=true;}
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief step the animation when in anim off mode
     //----------------------------------------------------------------------------------------------------------------------
     void stepAnimation();
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief add a cube to the simulation
     //----------------------------------------------------------------------------------------------------------------------
     void addCube();
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief add a sphere to the simulation
     //----------------------------------------------------------------------------------------------------------------------
     void addSphere();
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief add a teapot to the simulation
     //----------------------------------------------------------------------------------------------------------------------
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief reset the simulation and remove all bodies
     //----------------------------------------------------------------------------------------------------------------------
     void resetSim();
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief tobble the random placement of objects when added
     //----------------------------------------------------------------------------------------------------------------------
     inline void toggleRandomPlace(){m_randomPlace^=true;}
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief toggle drawing wireframe meshes
     //----------------------------------------------------------------------------------------------------------------------
     inline void toggleWireframe(){m_wireframe^=true;}
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief access the physics world
     //----------------------------------------------------------------------------------------------------------------------
     inline PhysicsWorld *getPhysicsWorld(){return m_physics;}
    void timerEvent();
    void keyEvent(const SDLKey &_key);

  private :
    float m_x;
    float m_y;
    float m_rot;
    ngl::Vec3 m_firePos;
    float m_radius;
    int m_numBlocks;

    //----------------------------------------------------------------------------------------------------------------------
     /// @brief used to store the x rotation mouse value
     //----------------------------------------------------------------------------------------------------------------------
     int m_spinXFace;
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief used to store the y rotation mouse value
     //----------------------------------------------------------------------------------------------------------------------
     int m_spinYFace;
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief flag to indicate if the mouse button is pressed when dragging
     //----------------------------------------------------------------------------------------------------------------------
     bool m_rotate;
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief flag to indicate if the Right mouse button is pressed when dragging
     //----------------------------------------------------------------------------------------------------------------------
     bool m_translate;
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief the previous x mouse value
     //----------------------------------------------------------------------------------------------------------------------
     int m_origX;
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief the previous y mouse value
     //----------------------------------------------------------------------------------------------------------------------
     int m_origY;
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief the previous x mouse value for Position changes
     //----------------------------------------------------------------------------------------------------------------------
     int m_origXPos;
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief the previous y mouse value for Position changes
     //----------------------------------------------------------------------------------------------------------------------
     int m_origYPos;
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief Our Camera
     //----------------------------------------------------------------------------------------------------------------------
     ngl::Camera *m_cam;
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief body transform matrix
     //----------------------------------------------------------------------------------------------------------------------
     ngl::Mat4 m_bodyTransform;
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief world / mouse transform
     //----------------------------------------------------------------------------------------------------------------------
     ngl::Mat4 m_globalTransformMatrix;
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief the model position for mouse movement
     //----------------------------------------------------------------------------------------------------------------------
     ngl::Vec3 m_modelPos;
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief the ODE physics wrapper
     //----------------------------------------------------------------------------------------------------------------------
     PhysicsWorld *m_physics;
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief flag to animate / simulate
     //----------------------------------------------------------------------------------------------------------------------
     bool m_animate;
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief flag for random placement of objects
     //----------------------------------------------------------------------------------------------------------------------
     bool m_randomPlace;
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief flag for wireframe drawing
     //----------------------------------------------------------------------------------------------------------------------
     bool m_wireframe;
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief the teapot mesh used for drawing
     //----------------------------------------------------------------------------------------------------------------------
     ngl::Obj *m_teapotMesh;

     //----------------------------------------------------------------------------------------------------------------------
     /// @brief the apple mesh used for drawing
     //----------------------------------------------------------------------------------------------------------------------
     ngl::Obj *m_appleMesh;
     //----------------------------------------------------------------------------------------------------------------------
     ///@brief text for rendering
     //----------------------------------------------------------------------------------------------------------------------
     ngl::Text *m_text;
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief method to load transform matrices to the shader
     //----------------------------------------------------------------------------------------------------------------------
     void loadMatricesToShader();


};


#endif
