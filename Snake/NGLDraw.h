#ifndef NGLDRAW_H__
#define NGLDRAW_H__

#include <ngl/Camera.h>
#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/Obj.h>
#include <ngl/TransformStack.h>
#include <SDL.h>
#include "Body.h"
#include "Head.h"
#include "Fruit.h"

class NGLDraw
{
  public :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor this will have a valid OpenGL context so we can create gl stuff
    //----------------------------------------------------------------------------------------------------------------------
    NGLDraw();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor used to remove any NGL stuff created
    //----------------------------------------------------------------------------------------------------------------------
    ~NGLDraw();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief resize our screen and set the camera aspect ratio
    /// @param[in] _w the new width
    /// @param[in] _h the new height
    //----------------------------------------------------------------------------------------------------------------------
    void resize(int _w, int _h);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw the scene
    //----------------------------------------------------------------------------------------------------------------------
    void draw();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse is moved
    /// @param _event the SDL mouse event structure containing all mouse info
    //----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent (const SDL_MouseMotionEvent &_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse button is presses
    /// @param _event the SDL mouse event structure containing all mouse info
    //----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent (const SDL_MouseButtonEvent &_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is released
    /// @param _event the SDL mouse event structure containing all mouse info
    //----------------------------------------------------------------------------------------------------------------------
    void mouseReleaseEvent (const SDL_MouseButtonEvent &_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse wheel is moved
    /// @param _event the SDL mouse event structure containing all mouse info
    //----------------------------------------------------------------------------------------------------------------------
    //void wheelEvent(const SDL_MouseWheelEvent &_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to update light position
    //----------------------------------------------------------------------------------------------------------------------
		void keyEvent(const SDLKey &_key);
		void timerEvent();
		
		 //----------------------------------------------------------------------------------------------------------------------
    /// @brief get random values for a point
    /// @param _xRange Range for x co-ordinates for the random point between a range of set values
    /// @param _yRange Range for y co-ordinates for the random point between a range of set values
    /// @param _zRange Range for z co-ordinates for the random point between a range of set values
    ngl::Vec3 getRandomPoint(
                               ngl::Real _xRange,
                               ngl::Real _yRange,
                               ngl::Real _zRange
                              );

  //----------------------------------------------------------------------------------------------------------------------
    /// @brief declaring fuction for GLWindow updating the speed
    int updateSpeed();
  //----------------------------------------------------------------------------------------------------------------------
    /// @brief declaring fuction for GLWindow checking the fruit collision with the head
    void checkFruitCollision();

  //----------------------------------------------------------------------------------------------------------------------
    /// @brief boolin for the Head to Body sphere-sphere collision
    /// @param _pos1 position of sphere one (Head)
    /// @param _radius1 radius of sphere one (Head)
    /// @param _pos2 position of sphere two (Body Array)
    /// @param _radius2 radius of sphere two (Body Array)
    bool checkHeadBody(        ngl::Vec3 _pos1,
                               GLfloat _radius1,
                               ngl::Vec3 _pos2,
                               GLfloat _radius2
                               );

  //----------------------------------------------------------------------------------------------------------------------
    /// @brief declaring function for GLWindow checking the Head and Body collision
    void headBodyCollision();
  //----------------------------------------------------------------------------------------------------------------------
    /// @brief declaring function for GLWindow to add body to snake by creating the Body Array (m_snakeArray)
    bool addBody();
  //----------------------------------------------------------------------------------------------------------------------
    /// @brief declaring function for GLWindow to update the Body, so it grows as it collides
    void updateBody();
private:
  //----------------------------------------------------------------------------------------------------------------------
    /// @brief a timer triggered by the startTimer call in the ctor this is called
    /// to update the heads position, based on the key presses, the snake (collision
    /// of fruit and body growth) and the food postition.
        int m_updateHeadTimer;

        int m_updateSnake;

        int m_updateFoodPos;
 	bool m_active;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief our transform stack for drawing the teapots
  ngl::TransformStack m_transformStack;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a pointer to Head class
  Head *m_head;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a pointer to Fruit class
  Fruit *m_fruit;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a pointer to Light class
  ngl::Light *m_light;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the x rotation mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_spinXFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the y rotation mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_spinYFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_rotate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the Right mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_translate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_origX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_origY;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value for Position changes
    //----------------------------------------------------------------------------------------------------------------------
    int m_origXPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value for Position changes
    //----------------------------------------------------------------------------------------------------------------------
    int m_origYPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the global mouse transforms
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_mouseGlobalTX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Camera
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Camera *m_cam;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the model position for mouse movement
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_modelPos;
    enum Weights{POSE1,POSE2};
    enum Direction{UP,DOWN};

    void changeWeight(Weights _w,Direction _d );

    inline void toggleAnimation(){m_animation^=true;}
    void punchLeft();
    void punchRight();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our model
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<ngl::Obj *> m_meshes;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the weight of pose one
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Real m_weight1;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the weight of pose two
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Real m_weight2;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the mesh with all the data in it
    //----------------------------------------------------------------------------------------------------------------------
    ngl::VertexArrayObject *m_vaoMesh;
    //----------------------------------------------------------------------------------------------------------------------
    /// animation flag for timers
    //----------------------------------------------------------------------------------------------------------------------
    bool m_animation;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if punching left
    //----------------------------------------------------------------------------------------------------------------------
    bool m_punchLeft;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if punching right
    //----------------------------------------------------------------------------------------------------------------------
    bool m_punchRight;
    //----------------------------------------------------------------------------------------------------------------------
    /// do our morphing for the 3 meshes
    //----------------------------------------------------------------------------------------------------------------------
    void createMorphMesh();
    void loadMatricesToShader();
    
    //----------------------------------------------------------------------------------------------------------------------
  /// @brief variables for x and z direction for button press
    float xDirection;
    float zDirection;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief set the array for the snake body
    std::vector <Body> m_snakeArray;

  
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method  to move the head
  void moveHead();

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method to load the tx stack (+MVP) to the shader
  /// @param _tx the transform stack to use for the model part of the matrix
  void loadMatricesToShader(
                            ngl::TransformStack &_tx
                           );


};


#endif
