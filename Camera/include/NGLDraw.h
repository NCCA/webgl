#ifndef NGLDRAW_H__
#define NGLDRAW_H__

#include <ngl/Camera.h>
#include <ngl/TransformStack.h>
#include <ngl/Light.h>
#include <ngl/Obj.h>
#include <SDL.h>
#include <ngl/Text.h>

class NGLDraw
{
  public :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor this will have a valid OpenGL context so we can create gl stuff
    //----------------------------------------------------------------------------------------------------------------------
    NGLDraw();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor used to remove any NGL stuff created
    //----------------------------------------------------------------------------------------------------------------------
    ~NGLDraw();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief resize our screen and set the camera aspect ratio
    /// @param[in] _w the new width
    /// @param[in] _h the new height
    //----------------------------------------------------------------------------------------------------------------------
    void resize(int _w, int _h);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw the scene
    //----------------------------------------------------------------------------------------------------------------------
    void draw();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse is moved
    /// @param _event the SDL mouse event structure containing all mouse info
    //----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent (const SDL_MouseMotionEvent &_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse button is presses
    /// @param _event the SDL mouse event structure containing all mouse info
    //----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent (const SDL_MouseButtonEvent &_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is released
    /// @param _event the SDL mouse event structure containing all mouse info
    //----------------------------------------------------------------------------------------------------------------------
    void mouseReleaseEvent (const SDL_MouseButtonEvent &_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse wheel is moved
    /// @param _event the SDL mouse event structure containing all mouse info
    //----------------------------------------------------------------------------------------------------------------------
    void wheelEvent(float _delta);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to update light position
    //----------------------------------------------------------------------------------------------------------------------
		void timerEvent();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to update light position
    //----------------------------------------------------------------------------------------------------------------------
		void keyEvent(const SDLKey &_key);

private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the camera move mode
    //----------------------------------------------------------------------------------------------------------------------
    enum CAMMODE{MOVEEYE,MOVELOOK,MOVEBOTH,MOVESLIDE};
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a container for our Cameras
    //----------------------------------------------------------------------------------------------------------------------
    std::vector <ngl::Camera > m_cameras;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief an index into the active camera list
    //----------------------------------------------------------------------------------------------------------------------
    int m_cameraIndex;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the move mode for the camera
    //----------------------------------------------------------------------------------------------------------------------
    CAMMODE m_moveMode;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief toggle help flag
    //----------------------------------------------------------------------------------------------------------------------
    bool m_drawHelp;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief fov value for the camera
    //----------------------------------------------------------------------------------------------------------------------
    float m_fov;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief aspect ratio of the camera
    //----------------------------------------------------------------------------------------------------------------------
    float m_aspect;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief rotation of the teapot
    //----------------------------------------------------------------------------------------------------------------------
    float m_rotation;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief array of light states
    //----------------------------------------------------------------------------------------------------------------------
    bool m_lights[3];
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the x rotation mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_spinXFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the y rotation mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_spinYFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_rotate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the Right mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_translate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_origX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_origY;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value for Position changes
    //----------------------------------------------------------------------------------------------------------------------
    int m_origXPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value for Position changes
    //----------------------------------------------------------------------------------------------------------------------
    int m_origYPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the global mouse transforms
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_mouseGlobalTX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief transformation stack for the gl transformations etc
    //----------------------------------------------------------------------------------------------------------------------
    ngl::TransformStack m_transformStack;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the model position for mouse movement
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_modelPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to load transform matrices to the shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse wheel is moved
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void createCameras();
    void setCameraShape();
    ngl::Text *m_text;

};


#endif
