#ifndef NGLDRAW_H__
#define NGLDRAW_H__

#include <ngl/Camera.h>
#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/Transformation.h>
#include <string>
#include <SDL.h>

class NGLDraw
{
  public :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor this will have a valid OpenGL context so we can create gl stuff
    //----------------------------------------------------------------------------------------------------------------------
    NGLDraw();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor used to remove any NGL stuff created
    //----------------------------------------------------------------------------------------------------------------------
    ~NGLDraw();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief resize our screen and set the camera aspect ratio
    /// @param[in] _w the new width
    /// @param[in] _h the new height
    //----------------------------------------------------------------------------------------------------------------------
    void resize(int _w, int _h);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw the scene
    //----------------------------------------------------------------------------------------------------------------------
    void draw();
 //----------------------------------------------------------------------------------------------------------------------
  /// @brief a slot to set the start rotation value signal sent from main window
  /// @param[in] _r the value to set
  //----------------------------------------------------------------------------------------------------------------------
  inline void setStartRotation(ngl::Vec3 _r){m_srotation=_r; draw();}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a slot to set the end rotation value signal sent from main window
  /// @param[in] _r the value to set
  //----------------------------------------------------------------------------------------------------------------------
  inline void setEndRotation(ngl::Vec3 _r){m_erotation=_r; draw();}
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a slot to set the interpolation rotation value signal sent from main window
  /// @param[in] _r the value to set
  //----------------------------------------------------------------------------------------------------------------------
  inline void setInterpolation(ngl::Real _v){m_interp=_v; draw();}
  inline const std::string & getStartQuatText() { return m_startQuatText;}
  inline const std::string & getEndQuatText() { return m_endQuatText;}
  inline const std::string & getInterpQuatText() { return m_interpQuatText;}
  inline const std::string & getRotMatrixText() { return m_rotMatrixText;}
  
private:
  std::string m_startQuatText;
  std::string m_endQuatText;
  std::string m_interpQuatText;
  std::string m_rotMatrixText;
  
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the start rotation value
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_srotation;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the end rotation value
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_erotation;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the interpolation value
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Real m_interp;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a projection matrix calculated once from the Util class this saves
  /// having a camera
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Mat4 m_projection;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a lookat matrix calculated once from the Util class this saves
  /// having a camera
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Mat4 m_lookAt;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief our transform for objects
  //----------------------------------------------------------------------------------------------------------------------
  ngl::TransformStack m_transformStack;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to load transform matrices to the shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader();
};


#endif
