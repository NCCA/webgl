#ifndef NGLDRAW_H__
#define NGLDRAW_H__

#include <ngl/Camera.h>
#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/TransformStack.h>
#include "Sphere.h"

#include <SDL.h>

class NGLDraw
{
  public :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor this will have a valid OpenGL context so we can create gl stuff
    //----------------------------------------------------------------------------------------------------------------------
    NGLDraw();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor used to remove any NGL stuff created
    //----------------------------------------------------------------------------------------------------------------------
    ~NGLDraw();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief resize our screen and set the camera aspect ratio
    /// @param[in] _w the new width
    /// @param[in] _h the new height
    //----------------------------------------------------------------------------------------------------------------------
    void resize(int _w, int _h);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw the scene
    //----------------------------------------------------------------------------------------------------------------------
    void draw();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse is moved
    /// @param _event the SDL mouse event structure containing all mouse info
    //----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent (const SDL_MouseMotionEvent &_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse button is presses
    /// @param _event the SDL mouse event structure containing all mouse info
    //----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent (const SDL_MouseButtonEvent &_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is released
    /// @param _event the SDL mouse event structure containing all mouse info
    //----------------------------------------------------------------------------------------------------------------------
    void mouseReleaseEvent (const SDL_MouseButtonEvent &_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse wheel is moved
    /// @param _event the SDL mouse event structure containing all mouse info
    //----------------------------------------------------------------------------------------------------------------------
    //void wheelEvent(const SDL_MouseWheelEvent &_event);
    //----------------------------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------------------------
    void timerEvent( );
    void keyEvent(const SDLKey &_key);

private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the x rotation mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_spinXFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the y rotation mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_spinYFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_rotate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the Right mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_translate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_origX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_origY;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value for Position changes
    //----------------------------------------------------------------------------------------------------------------------
    int m_origXPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value for Position changes
    //----------------------------------------------------------------------------------------------------------------------
    int m_origYPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the global mouse transforms
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_mouseGlobalTX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Camera
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Camera *m_cam;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief transformation stack for the gl transformations etc
    //----------------------------------------------------------------------------------------------------------------------
    ngl::TransformStack m_transformStack;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the model position for mouse movement
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_modelPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a dynamic array to contain our spheres
    //----------------------------------------------------------------------------------------------------------------------
    std::vector <Sphere> m_sphereArray;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the number of spheres we are creating
    //----------------------------------------------------------------------------------------------------------------------
    int m_numSpheres;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief timer to change the sphere position by calling update()
    //----------------------------------------------------------------------------------------------------------------------
    int m_sphereUpdateTimer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief timer the ray is stored as two points this is one of the start points
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_rayStart;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief timer the ray is stored as two points this is one of the end points
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_rayEnd;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief timer the ray is stored as two points this is one of the start points
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_rayStart2;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief timer the ray is stored as two points this is one of the end points
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_rayEnd2;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if animation is active or not
    //----------------------------------------------------------------------------------------------------------------------
    bool m_animate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief timer to change the ray position by calling update()
    //----------------------------------------------------------------------------------------------------------------------
    int m_rayUpdateTimer;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called once per frame to update the sphere positions
    /// and do the collision detection
    //----------------------------------------------------------------------------------------------------------------------
    void update();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to load transform matrices to the shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to load transform matrices to the shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToColourShader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief to get the actual hit points we need to solve the quadratic equations which will give us
    /// two roots
    /// @param _raystart the origin or the ray
    /// @param _raydir the direction of the ray
    /// @param _pos the position of the sphere
    /// @param _radius the radius of the sphere

		//----------------------------------------------------------------------------------------------------------------------
		void drawHitPoints(ngl::Vec3 _rayStart,	ngl::Vec3 _rayDir,	ngl::Vec3 _pos, GLfloat _radius	);

		//----------------------------------------------------------------------------------------------------------------------
		/// @brief do ray sphere intercetion test
		/// @param _rayStart the origin or the ray
		/// @param _rayDir the direction of the ray
		/// @param _pos the position of the sphere
		/// @param _radius the radius of the sphere
		//----------------------------------------------------------------------------------------------------------------------
		bool raySphere(ngl::Vec3 _rayStart,	 ngl::Vec3 _rayDir,	 ngl::Vec3 _pos, GLfloat _radius	);
		void changeSpheres();

};


#endif
