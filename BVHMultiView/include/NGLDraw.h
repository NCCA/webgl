#ifndef NGLDRAW_H__
#define NGLDRAW_H__

#include <ngl/Camera.h>
#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/Transformation.h>
#include <ngl/Text.h>
#include <SDL.h>
#include "Scene.h"


class NGLDraw
{
  public :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor this will have a valid OpenGL context so we can create gl stuff
    //----------------------------------------------------------------------------------------------------------------------
    NGLDraw();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor used to remove any NGL stuff created
    //----------------------------------------------------------------------------------------------------------------------
    ~NGLDraw();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief resize our screen and set the camera aspect ratio
    /// @param[in] _w the new width
    /// @param[in] _h the new height
    //----------------------------------------------------------------------------------------------------------------------
    void resize(int _w, int _h);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw the scene
    //----------------------------------------------------------------------------------------------------------------------
    void draw();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse is moved
    /// @param _event the SDL mouse event structure containing all mouse info
    //----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent (const SDL_MouseMotionEvent &_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse button is presses
    /// @param _event the SDL mouse event structure containing all mouse info
    //----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent (const SDL_MouseButtonEvent &_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is released
    /// @param _event the SDL mouse event structure containing all mouse info
    //----------------------------------------------------------------------------------------------------------------------
    void mouseReleaseEvent (const SDL_MouseButtonEvent &_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse wheel is moved
    /// @param _event the SDL mouse event structure containing all mouse info
    //----------------------------------------------------------------------------------------------------------------------
    //void wheelEvent(const SDL_MouseWheelEvent &_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to update light position
    //----------------------------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief toggle full / panel screen
    //----------------------------------------------------------------------------------------------------------------------
    void toggleWindow();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief frame in the active window
    //----------------------------------------------------------------------------------------------------------------------
    void frameActive();
		void keyEvent(const SDLKey &_key);
		inline void clearCharacters(){m_scene->clearCharacters(); }
		/// @brief replay the animation from beginning
		inline void replay() {m_scene->replay();}
		/// @brief pause the animation and restarted when click "p" again
		void flipAnimationStatus();
		inline void forwardAnimation(){m_scene->forwardAnimation();};
		inline void backwardAnimation(){m_scene->backwardAnimation();};
		/// @brief set the name of the motion file to play
		inline void setBvhFileName(std::string _bvhFileName) {m_bvhFileName = _bvhFileName;};
		void timerEvent();

private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief enums for the current window
    //----------------------------------------------------------------------------------------------------------------------
    enum WINDOW{TOP,FRONT,SIDE,PERSP,ALL};
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief enum to indicate if we are in full screen or panel mode for drawing
    //----------------------------------------------------------------------------------------------------------------------
    enum MODE{FULLSCREEN,PANEL};
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this structure is used to store mouse info for each windwo
    /// there will be one each plus a fullscreen one
    //----------------------------------------------------------------------------------------------------------------------

    typedef struct MouseInfo
    {
      ngl::Vec3 m_modelPos; ///  @brief model position
      int m_spinXFace;  /// @brief x rotation
      int m_spinYFace; /// @brief y rotation
      int m_origX; /// @brief original x rot
      int m_origY; /// @brief original y rot
      int m_origXPos; /// @brief original x pos
      int m_origYPos; /// @brief original y pos
      bool m_rotate; /// @brief flag to indicate if rotate is active
      bool m_translate; /// @brief flag to indicate if trans is active
    }m;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief array of mouse info
    //----------------------------------------------------------------------------------------------------------------------
    MouseInfo m_panelMouseInfo[5];
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief which is the current active window
    //----------------------------------------------------------------------------------------------------------------------
    WINDOW m_activeWindow;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw the top
    /// @param[in] _m the mode to draw the window
    //----------------------------------------------------------------------------------------------------------------------
    void top(MODE _m=PANEL);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw the front
    /// @param[in] _m the mode to draw the window
    //----------------------------------------------------------------------------------------------------------------------
    void front(MODE _m=PANEL);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw the side
    /// @param[in] _m the mode to draw the window
    //----------------------------------------------------------------------------------------------------------------------
    void side(MODE _m=PANEL);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw the perspective
    /// @param[in] _m the mode to draw the window
    //----------------------------------------------------------------------------------------------------------------------
    void persp(MODE _m=PANEL);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the quadrant the window is in
    //----------------------------------------------------------------------------------------------------------------------
    WINDOW getActiveQuadrant()const;
    int m_currAnim;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief current mouse x position
    //----------------------------------------------------------------------------------------------------------------------
    int m_mouseX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief current mouse y position
    //----------------------------------------------------------------------------------------------------------------------
    int m_mouseY;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief screen width
    //----------------------------------------------------------------------------------------------------------------------
    int m_width;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief screen height
    //----------------------------------------------------------------------------------------------------------------------
    int m_height;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our view matrix
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_view;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our projection matrix
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_projection;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief transformation stack for the gl transformations etc
    //----------------------------------------------------------------------------------------------------------------------
    ngl::TransformStack m_transformStack;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the model position for mouse movement
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_modelPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to load transform matrices to the shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader();


    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the x rotation mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_spinXFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the y rotation mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_spinYFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_rotate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the Right mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_translate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_origX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_origY;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value for Position changes
    //----------------------------------------------------------------------------------------------------------------------
    int m_origXPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value for Position changes
    //----------------------------------------------------------------------------------------------------------------------
    int m_origYPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the global mouse transforms
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_mouseGlobalTX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Camera
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Camera *m_cam;

    Scene   *m_scene;
    /// @brief our font
    ngl::Text *m_text;
    /// @brief calculate framerate
    std::string m_bvhFileName;


};


#endif
